name: Check Pod Status v11

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  check_pod_status:
    runs-on: ubuntu-latest
    steps:
    - name: Check Pod Status and Send Slack Notification
      env:
        HOST: ${{ secrets.HOST }}
        BASTION_USERNAME: ${{ secrets.BASTION_USERNAME }}
        BASTION_PORT: ${{ secrets.BASTION_PORT }}
        BASTION_HOST: ${{ secrets.BASTION_HOST }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        ssh -J $BASTION_USERNAME@$BASTION_HOST:$BASTION_PORT $HOST:65535 'kubectl get pods' > pod_status.txt
        if grep -q "Crash\|Error" pod_status.txt; then
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Some pods have crashed or failed. Check Kubernetes cluster."}' $SLACK_WEBHOOK
        fi








# name: Check Pod Status v9

# on:
#   workflow_dispatch:
#   schedule:
#     - cron: '*/30 * * * *'  # Run every day at midnight UTC

# jobs:
#   check-pods:
#     runs-on: ubuntu-latest

#     env:
#       BASTION_PASSWORD: ${{ secrets.BASTION_PASSWORD }}
#       BASTION_USERNAME: ${{ secrets.BASTION_USERNAME }}
#       BASTION_HOST: ${{ secrets.BASTION_HOST }}
#       BASTION_PORT: ${{ secrets.BASTION_PORT }}
#       KUBECONFIG: ${{ secrets.KUBECONFIG }}
#       KUBE_CONTEXT: ${{ secrets.KUBE_CONTEXT }}
#       PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

#     steps:
#       - name: Install SSHpass
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y sshpass

#       - name: Create SSH config
#         run: |
#           mkdir -p ~/.ssh
#           echo -e "Host kubernetes-bastion\n\tHostName $BASTION_HOST\n\tUser $BASTION_USERNAME\n\tPort $BASTION_PORT\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/private_key" > ~/.ssh/config
#           echo "$PRIVATE_KEY" > ~/.ssh/private_key
#           chmod 600 ~/.ssh/private_key

#       - name: Set up SSH tunnel
#         run: |
#           sshpass -p "$BASTION_PASSWORD" ssh -o StrictHostKeyChecking=no -F ~/.ssh/config -f -N -L 32510:$KUBERNETES_CLUSTER_IP:32510 kubernetes-bastion

#       - name: Check pod status
#         run: |
#           ssh -o StrictHostKeyChecking=no -F ~/.ssh/config -p 32510 kubernetes-bastion "kubectl --kubeconfig=$KUBECONFIG --context=$KUBE_CONTEXT get pods --all-namespaces --field-selector=status.phase!=Running --no-headers" > failed_pods.txt

#       - name: Get pod status
#         run: |
#           if [ -s failed_pods.txt ]; then
#             echo "::set-output name=has_failed_pods::true"
#           else
#             echo "::set-output name=has_failed_pods::false"
#           fi

#       - name: Send Slack notification
#         if: ${{ steps.get-pod-status.outputs.has_failed_pods == 'true' }}
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#         with:
#           status: 'Failed Pods Alert'
#           color: 'danger'
#           channel: '10_kuber'
#           fields: |
#             { "title": "Failed Pods", "value": "$(cat failed_pods.txt)", "short": false }




























# name: Check Pod Status

# on:
#   workflow_dispatch:
#   schedule:
#     - cron: '*/30 * * * *'  # Run every day at midnight UTC

# jobs:
#   check-pods:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Install SSHpass
#         run: sudo apt-get update && sudo apt-get install -y sshpass

#       - name: Set up SSH tunnel
#         run: sshpass -p ${{ secrets.BASTION_PASSWORD }} ssh -f -N -L 32510:${{ secrets.KUBERNETES_CLUSTER_IP }}:32510 ${{ secrets.BASTION_USERNAME }}@${{ secrets.BASTION_HOST }} -p ${{ secrets.BASTION_PORT }}

#       - name: Check pod status
#         uses: azure/k8s-set-context@v1
#         with:
#           method: kubeconfig
#           kubeconfig: ${{ secrets.KUBECONFIG }}
#           context: ${{ secrets.KUBE_CONTEXT }}
#           version: '1.21'

#       - name: Get pod status
#         run: |
#           POD_STATUS=$(kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers)
#           if [[ -n "$POD_STATUS" ]]; then
#             echo "$POD_STATUS" > failed_pods.txt
#             echo "::set-output name=has_failed_pods::true"
#           else
#             echo "::set-output name=has_failed_pods::false"
#           fi

#       - name: Send Slack notification
#         if: ${{ steps.get-pod-status.outputs.has_failed_pods == 'true' }}
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#         with:
#           status: 'Failed Pods Alert'
#           color: 'danger'
#           channel: '10_kuber'
#           fields: |
#             {{#cat ./failed_pods.txt}}
#             { "title": "Failed Pods", "value": "{{.}}", "short": false },
#             {{/cat}}
